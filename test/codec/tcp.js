/*
 *
 * Copyright (c) 2019-present for NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License ");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import expect from 'expect.js'
import constants from '../../src/codec/constants'
import tcp from '../../src/codec/tcp'

const testHeader = (serialized, deserialized) => {
  expect(tcp.header.serialize(deserialized)).to.eql(serialized)
  expect(tcp.header.deserialize(serialized)).to.eql(deserialized)
}

const testRequest = (serialized, deserialized, method) => {
  expect(tcp[method].request.serialize(deserialized)).to.eql(serialized)
  expect(tcp[method].request.deserialize(serialized)).to.eql(deserialized)
}

const testResponse = (serialized, deserialized, method) => {
  expect(tcp[method].response.serialize(deserialized)).to.eql(serialized)
  expect(tcp[method].response.deserialize(serialized)).to.eql(deserialized)
}

const testError = (method, type) => {
  expect(() => tcp[method][type].serialize(undefined)).to.throwException()
  expect(() => tcp[method][type].deserialize(undefined)).to.throwException()
}

describe('tcp', () => {
  describe('header', () => {
    it('should process a server challenge request', () => {
      let serialized = Buffer.from('4800000001000000CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', 'hex')
      let deserialized = {
        type: constants.serverChallenge,
        payload: Buffer.from('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', 'hex')
      }
      testHeader(serialized, deserialized)
    })

    it('should process a server challenge response', () => {
      let serialized = Buffer.from('A900000001000000CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE01', 'hex')
      let deserialized = {
        type: constants.serverChallenge,
        payload: Buffer.from('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE01', 'hex')
      }
      testHeader(serialized, deserialized)
    })

    it('should process a client challenge request', () => {
      let serialized = Buffer.from('4800000002000000CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', 'hex')
      let deserialized = {
        type: constants.clientChallenge,
        payload: Buffer.from('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', 'hex')
      }
      testHeader(serialized, deserialized)
    })

    it('should process a node info request', () => {
      let serialized = Buffer.from('0800000059020000', 'hex')
      let deserialized = {
        type: constants.nodeDiscoveryPullPing,
        payload: Buffer.from('', 'hex')
      }
      testHeader(serialized, deserialized)
    })

    it('should process a node info response', () => {
      let serialized = Buffer.from('41000000590200003900000000000000C1B4E25B491D6552F78EDE5A77CB74BB1743955500FB7FAB610338B639C2F76303000000DC1E9800084331423445323542', 'hex')
      let deserialized = {
        type: constants.nodeDiscoveryPullPing,
        payload: Buffer.from('3900000000000000C1B4E25B491D6552F78EDE5A77CB74BB1743955500FB7FAB610338B639C2F76303000000DC1E9800084331423445323542', 'hex')
      }
      testHeader(serialized, deserialized)
    })
  })

  describe('serverChallenge', () => {
    it('should process a server challenge request', () => {
      let serialized = Buffer.from('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', 'hex')
      let deserialized = {
        challenge: 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'
      }
      testRequest(serialized, deserialized, 'serverChallenge')
    })

    it('should process a server challenge response', () => {
      let serialized = Buffer.from('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE01', 'hex')
      let deserialized = {
        challenge: 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC',
        signature: 'DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD',
        publicKey: 'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE',
        securityMode: 1
      }
      testResponse(serialized, deserialized, 'serverChallenge')
    })
  })

  describe('clientChallenge', () => {
    it('should process a client challenge request', () => {
      testError('clientChallenge', 'request')
    })

    it('should process a client challenge response', () => {
      let serialized = Buffer.from('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', 'hex')
      let deserialized = {
        challenge: 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'
      }
      testResponse(serialized, deserialized, 'clientChallenge')
    })
  })


  describe('pushBlock', () => {
    it('should process a push block request', () => {
      let serialized = Buffer.from('300100000000000067B4D79E8AE271DD7C3F0A8E8EE34E1AC08659FB200ED79D7A5B24CB0F97894A3FEA8FCEE12876B634284F2BADC2FF9A4C302D806FAABD7777B3E07D9713B201C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787000000000198438102000000000000000CD430B00100000000407A10F35A00006E5DC4D3B6027AA2CF77CCD0222DE9E85536385829C72D77189F214C1AC8109800000000000000000000000000000000000000000000000000000000000000002C58E870D91B7FD590C2C5EBB85DE610D6B3C6B65C71CE1CE2EEC207A993640989360E6E1B87FB725DE8A57E98E106C1CB10950BCA29FB3D6D31B7AF025FD8E8C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B7870000000000000000', 'hex')
      let deserialized = {
        entity: {
          signature: '67B4D79E8AE271DD7C3F0A8E8EE34E1AC08659FB200ED79D7A5B24CB0F97894A3FEA8FCEE12876B634284F2BADC2FF9A4C302D806FAABD7777B3E07D9713B201',
          key: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
          version: 1,
          network: 0x98,
          type: 0x8143
        },
        block: {
          height: '2',
          timestamp: '7250957324',
          difficulty: '100000000000000',
          previousBlockHash: '6E5DC4D3B6027AA2CF77CCD0222DE9E85536385829C72D77189F214C1AC81098',
          transactionsHash: '0000000000000000000000000000000000000000000000000000000000000000',
          receiptsHash: '2C58E870D91B7FD590C2C5EBB85DE610D6B3C6B65C71CE1CE2EEC207A9936409',
          stateHash: '89360E6E1B87FB725DE8A57E98E106C1CB10950BCA29FB3D6D31B7AF025FD8E8',
          beneficiaryPublicKey: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
          feeMultiplier: 0
        }
      }
      testRequest(serialized, deserialized, 'pushBlock')
    })

    it('should process a push block response', () => {
      testError('pushBlock', 'response')
    })
  })

  describe('pullBlock', () => {
    it('should process a pull block request', () => {
      let serialized = Buffer.from('0200000000000000', 'hex')
      let deserialized = {
        height: '2'
      }
      testRequest(serialized, deserialized, 'pullBlock')
    })

    it('should process a pull block response', () => {
      let serialized = Buffer.from('300100000000000067B4D79E8AE271DD7C3F0A8E8EE34E1AC08659FB200ED79D7A5B24CB0F97894A3FEA8FCEE12876B634284F2BADC2FF9A4C302D806FAABD7777B3E07D9713B201C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787000000000198438102000000000000000CD430B00100000000407A10F35A00006E5DC4D3B6027AA2CF77CCD0222DE9E85536385829C72D77189F214C1AC8109800000000000000000000000000000000000000000000000000000000000000002C58E870D91B7FD590C2C5EBB85DE610D6B3C6B65C71CE1CE2EEC207A993640989360E6E1B87FB725DE8A57E98E106C1CB10950BCA29FB3D6D31B7AF025FD8E8C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B7870000000000000000', 'hex')
      let deserialized = {
        entity: {
          signature: '67B4D79E8AE271DD7C3F0A8E8EE34E1AC08659FB200ED79D7A5B24CB0F97894A3FEA8FCEE12876B634284F2BADC2FF9A4C302D806FAABD7777B3E07D9713B201',
          key: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
          version: 1,
          network: 0x98,
          type: 0x8143
        },
        block: {
          height: '2',
          timestamp: '7250957324',
          difficulty: '100000000000000',
          previousBlockHash: '6E5DC4D3B6027AA2CF77CCD0222DE9E85536385829C72D77189F214C1AC81098',
          transactionsHash: '0000000000000000000000000000000000000000000000000000000000000000',
          receiptsHash: '2C58E870D91B7FD590C2C5EBB85DE610D6B3C6B65C71CE1CE2EEC207A9936409',
          stateHash: '89360E6E1B87FB725DE8A57E98E106C1CB10950BCA29FB3D6D31B7AF025FD8E8',
          beneficiaryPublicKey: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
          feeMultiplier: 0
        }
      }
      testResponse(serialized, deserialized, 'pullBlock')
    })
  })

  describe('chainInfo', () => {
    it('should process a chain info request', () => {
      let serialized = Buffer.from('', 'hex')
      let deserialized = {}
      testRequest(serialized, deserialized, 'chainInfo')
    })

    it('should process a chain info response', () => {
      let serialized = Buffer.from('D1E80000000000000000000000000000DBE03DB783584A08', 'hex')
      let deserialized = {
        height: '59601',
        scoreHigh: '0',
        scoreLow: '597387223318257883'
      }
      testResponse(serialized, deserialized, 'chainInfo')

      serialized = Buffer.from('E1DD0000000000000000000000000000FA9B88B1A9DEE607', 'hex')
      deserialized = {
        height: '56801',
        scoreHigh: '0',
        scoreLow: '569387223318305786'
      }
      testResponse(serialized, deserialized, 'chainInfo')
    })
  })

  describe('blockHashes', () => {
    it('should process a block hashes request', () => {
      let serialized = Buffer.from('040000000000000002000000', 'hex')
      let deserialized = {
        height: '4',
        hashes: 2
      }
      testRequest(serialized, deserialized, 'blockHashes')
    })

    it('should process a block hashes response', () => {
      let serialized = Buffer.from('6D66277B048C6697530DB6E9DFEE8F468106ED21BC9B087B5327D4DF3027C6F0102B28117C238D208F96CE46B79834D94212DD7C5CC840E9ED1356720393A0BE', 'hex')
      let deserialized = [
        '6D66277B048C6697530DB6E9DFEE8F468106ED21BC9B087B5327D4DF3027C6F0',
        '102B28117C238D208F96CE46B79834D94212DD7C5CC840E9ED1356720393A0BE'
      ]
      testResponse(serialized, deserialized, 'blockHashes')
    })
  })

  describe('pullBlocks', () => {
    it('should process a pull blocks request', () => {
      let serialized = Buffer.from('040000000000000002000000E8030000', 'hex')
      let deserialized = {
        height: '4',
        blocks: 2,
        bytes: 1000
      }
      testRequest(serialized, deserialized, 'pullBlocks')
    })

    it('should process a pull blocks response', () => {
      let serialized = Buffer.fromhex')
      let deserialized = [
        {
          entity: {
            signature: 'A8B90CE9AF2A5835C04D6069E38F18D5B5055D2B759F2DB2FE8217FF8699D6F3E9322238A88970F9CB34BD4F882F852F7938CF4A539B887BB2D92DAF5E56000D',
            key: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
            version: 1,
            network: 152,
            type: 33091
          },
          block: {
            height: '4',
            timestamp: '7251028351',
            difficulty: '90250000000000',
            previousBlockHash: '53C22EAD88155FDA9D62AF2CE6DE2208A08443E7BDEDD2B278FCD1E8433C5715',
            transactionsHash: '0000000000000000000000000000000000000000000000000000000000000000',
            receiptsHash: '2C58E870D91B7FD590C2C5EBB85DE610D6B3C6B65C71CE1CE2EEC207A9936409',
            stateHash: '926458EFE34A53659B60718FCC4047B11D77791CE7868F9E4C9CD623D25AF163',
            beneficiaryPublicKey: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
            feeMultiplier: 0
          }
        },
        {
          entity: {
            signature: '549BC4DC8BEA332A9E43D2B06600A460B76E3CA39B114AE26EB0C0DA90927C55872C0E21805A727F643629E251B7E9AF39E9218098535ABFC6963506660CDA0C',
            key: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
            version: 1,
            network: 152,
            type: 33091
          },
          block: {
            height: '5',
            timestamp: '7251064366',
            difficulty: '85737500000000',
            previousBlockHash: '6D66277B048C6697530DB6E9DFEE8F468106ED21BC9B087B5327D4DF3027C6F0',
            transactionsHash: '0000000000000000000000000000000000000000000000000000000000000000',
            receiptsHash: '2C58E870D91B7FD590C2C5EBB85DE610D6B3C6B65C71CE1CE2EEC207A9936409',
            stateHash: '3837BF257F57D37ACE69D74CEC955D710B672A90E5416CB0FFEAAD17BA4599AC',
            beneficiaryPublicKey: 'C151A3A63E7AFF6BDB78BF40E8A78C772DDB36E2306401771B0BFDCD4DD3B787',
            feeMultiplier: 0
          }
        }
      ]
      testResponse(serialized, deserialized, 'pullBlocks')
    })
  })

  describe('pushTransactions', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('pullTransactions', () => {
    it('should process a pull transactions request', () => {
      let serialized = Buffer.from('0000000000000000', 'hex')
      let deserialized = {
        minFeeMultiplier: 0,
        shortHashes: []
      }
      testRequest(serialized, deserialized, 'pullTransactions')
    })

    it('should process a pull transactions response', () => {
      let serialized = Buffer.from('', 'hex')
      let deserialized = []
      testResponse(serialized, deserialized, 'pullTransactions')
    })
  })

  describe('secureSigned', () => {
    // TODO(ahuszagh) Add unittests.
  })

  // TODO(ahuszagh) Make them round-trip here...

  describe('subCacheMerkleRoots', () => {
    it('should process a sub cache merkle roots request', () => {
      let buffer = Buffer.from('0400000000000000', 'hex')
      expect(tcp.subCacheMerkleRoots.request(buffer)).to.eql({
        height: '4'
      })
    })

    it('should process a sub cache merkle roots response', () => {
      let buffer = Buffer.fromhex')
      expect(tcp.subCacheMerkleRoots.response(buffer)).to.eql([
        '1571253376BBF084EDCD7739127997099C9285D2F539C5456E403EB768BE1106',
        'E5228B463E386B75AA4AE191C7026324361644E2A6C69539CDCF18A1BD92BF3E',
        '3F16A91F8269557C8A8E90DBEE48B355BD2C06560E9F57B94D02D5F6EA546B4A',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ])
    })
  })

  describe('pushPartialTransactions', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('pushDetachedCosignatures', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('pullPartialTransactionInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('pushNodeInfo', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('pullNodeInfo', () => {
    it('should deserialize a node info request', () => {
      let buffer = Buffer.from('', 'hex')
      expect(tcp.pullNodeInfo.request(buffer)).to.eql({})
    })

    it('should deserialize a node info response', () => {
      let buffer = Buffer.from('3900000000000000C1B4E25B491D6552F78EDE5A77CB74BB1743955500FB7FAB610338B639C2F76303000000DC1E9800084331423445323542', 'hex')
      expect(tcp.pullNodeInfo.response(buffer)).to.eql({
        version: 0,
        publicKey: 'C1B4E25B491D6552F78EDE5A77CB74BB1743955500FB7FAB610338B639C2F763',
        roles: 3,
        port: 7900,
        networkIdentifier: 0x98,
        host: '',
        friendlyName: 'C1B4E25B'
      })
    })
  })

  describe('pushNodePeers', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('pullNodePeers', () => {
    it('should deserialize a node peers request', () => {
      let buffer = Buffer.from('', 'hex')
      expect(tcp.pullNodePeers.request(buffer)).to.eql({})
    })

    it('should deserialize a node peers response', () => {
      let buffer = Buffer.from('54000000000000008D270FA5E8E30D01182E8A339A31818856E30ABD0249662CFBA43CE8610333D303000000DC1E980E1539352E3231362E3231352E323435436F6C6F6D626961546573746E65744E6F646531305500000000000000318FE9A12487C0C518D35C09DE12D2AB8FF194638FA05F71E9E3619DA30E3F5503000000DC1E980E163134302E3232372E3132332E3932282A5E2D5E292F53796D626F6C2D746573746E6F6465', 'hex')
      expect(tcp.pullNodePeers.response(buffer)).to.eql([
        {
          version: 0,
          publicKey: '8D270FA5E8E30D01182E8A339A31818856E30ABD0249662CFBA43CE8610333D3',
          roles: 3,
          port: 7900,
          networkIdentifier: 0x98,
          host: '95.216.215.245',
          friendlyName: 'ColombiaTestnetNode10'
        },
        {
          version: 0,
          publicKey: '318FE9A12487C0C518D35C09DE12D2AB8FF194638FA05F71E9E3619DA30E3F55',
          roles: 3,
          port: 7900,
          networkIdentifier: 0x98,
          host: '140.227.123.92',
          friendlyName: '(*^-^)/Symbol-testnode'
        }
      ])
    })
  })

  describe('timeSync', () => {
    it('should deserialize a time sync request', () => {
      let buffer = Buffer.from('', 'hex')
      expect(tcp.timeSync.request(buffer)).to.eql({})
    })

    it('should deserialize a time sync response', () => {
      let buffer = Buffer.from('B11ABF1602000000B11ABF1602000000', 'hex')
      expect(tcp.timeSync.response(buffer)).to.eql({
        communicationTimestamps: {
          sendTimestamp: '8971557553',
          receiveTimestamp: '8971557553'
        }
      })
    })
  })

  describe('accountStatePath', () => {
    it('should deserialize an account state path request', () => {
      let buffer = Buffer.from('984811DA06C4DDEC900173CF63375D9BF53D1594AF00E6F650', 'hex')
      expect(tcp.accountStatePath.request(buffer)).to.eql({
        address: 'TBEBDWQGYTO6ZEABOPHWGN25TP2T2FMUV4AON5SQ'
      })
    })

    it('should deserialize an account state path response', () => {
      let buffer = Buffer.fromhex')
      expect(tcp.accountStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {
            '0': '5C224085C94D36BD891F3D322A364C818C4F46AA7596CD2462D387B8AEFCAEEB',
            '1': 'C8FE7AAEACD646F813D250A93FBC49A6E0EEF998D5ED30AC568C02313367710C',
            '2': 'DD000C14BB79B14602B6F43A5B927BD443DF2D41326E07A9009A30801E402A6A',
            '3': '36C8CDD7CFC460BBE68B645367D063D404E0C57602CF64D92E5B8AA3CEFEE535',
            '4': 'DCCC88678B3E2B79DD6D5FDC57042D659F694B905E69D400AE2D1A083813FAFA',
            '5': '64930F66B2B6019CF76455C4056078E0AE9886CD511578AA677455993DC29A10',
            '6': '728F0FE06990E3EF3629E85202AC9AD279CB6F9144CD5F5BC72AD4923394A67D',
            '7': '34B6197A854F2BECDB9D978BD72D56E8B13812067180CCBCACCEE6FB75F4CEF3',
            '8': '01211E66ACC7FFE96D3B23CC73E12973E6F4B76DCCBE2FC3405C05FBA53C7CB8',
            '9': '3B4A0225C67E5DAB4F490EDCF66E686BA211BF1EAEB2333E226E88A92E236415',
            '10': '052D60C7DCC7F8DB6B1225DDCA704FB38BAAC9261098ACAC3C2E9FE0CEFA08E0',
            '11': '33BD383DEA0C025A9C5463C85E0A8D9571EB33D3B6846F6A25635926B6DC0DE0',
            '12': '8686651B1F494C0F794C33FACC7852051B023232CFDDCAA841227BCADB5B3DB2',
            '13': '6F793F545F4D251C9BC4F432DAB4A4F663D0906EEB55C97DF00E17CBA5117DD3',
            '14': '142438A80C3257F498B136B110D91D8770547E5A3CD3994D1D84B5C7F041CB70',
            '15': '4AA86027F746F920EDD74C670F1E8769573C32822256FD9C4A3A3EE0E0022D3F'
          }
        },
        {
          path: '',
          links: {
            '0': 'DB5E0DB109FCB30412EF5E810EB2048F01AA32D61B1330FFF5397CAE20AC55D9',
            '1': 'FBEC2DA818F6E7D7E381CDE6A63A9A6575B474A4C525BC9E2D80611ECC307B95',
            '2': '33CEC24C2F1985341E0BADA4BC5325225F4C386B02D2B5C72CB6E380C4D45A1E',
            '3': '847233D5FC42A05A513E7063BF5B92C3B5F651D1C04DBA480DC91F1EAD2A0ECD',
            '4': '2356159B6385CD81E612EFCB0B07A8353A50E471DDA118643EBEEC3B9F24FF77',
            '5': '98AA0A42B44B1CD2AA6B67C364D4D72AAB8C29B900078762E330849894FCE555',
            '6': 'B7B8EB4D808132CEC1C5874CB68714A79D2DC9DC81992780249E8CB21A0003B4',
            '7': '7684083574B66A9CB623BDA4DC8BF0983400A54A633F719E7346E23A26A8B48D',
            '8': 'B2EAA2F4D3965CDABB18DA0A9F33B6DCE17E0E55AC6EF063E91838BECA4F9173',
            '9': '1B3ADD23062B3D8ECDF4DB86672C32A708F3F0DE1D65014A9B3C010B15B9B78B',
            '10': '967C6948CE0692DC4B59B321B6348B64D30230FB4C22C98DFA9A9F908927FF30',
            '11': 'F85AA7CCB9E9C0BBDBC04A4DEA4E992F468819110314AE7B5EC3D535A15557ED',
            '12': '06A92BD33AC2DFECDEC0C0A9D38F84BFE988714F6DBDB63F1A9352A9A6D942ED',
            '13': 'D58CDCB8E3E6E5EEF050554359107BC46E3E99971D9EFAF3319423CC6B88BC57',
            '14': '63A10E8F5A37BC9F5616A70DD5F037247BD980AC9DB8A41D6A36A243442220FB',
            '15': '7BD762A5461E4B96511D46E2EB45A2ABD5101AE0BC69D148F4990E6DD83D4339'
          }
        },
        {
          path: '',
          links: {
            '0': '60ED68933C206CD3D74B1147F693A1928DD8A5C83E73D7B0FBF6549623C81822',
            '1': 'A6A763E18FEA726101B150320AD386C5AF2BA067CDF546D86E5D4D5FABCB2B8A',
            '2': '882DE3353BC83C0F3CD292AB4C0D57A427B3A22C56485FF47844C80FCF3817A2',
            '3': 'A6E43D5C986FB1310840169EA98718CEC52A21F87154B2FC0C4530BB53AC3795',
            '4': 'E041516EAA7B56F3FF06B98A27BE158B2D1E454BADCD4867711697DE04F9DDAC',
            '5': '67A8C6FB12694D2F111E11B0A16C9D6C39B5839B98BCFBC55D018C6B9CF6175F',
            '6': '367F16EE478C25D42F13E0295F2440CB24F9BB56BD42E150A1A0C964D34F9DCD',
            '7': '3EC75FBA6C7D0FF54332443D5170E02771513646A0210CF46657E2D96F3CEC4E',
            '8': '6E2CD3CB90C220C0FB54C572CA0945190705336B18703CE8151D353B96FBEE46',
            '9': 'E38C740F3CC0DBFA1B80418943DA694B0C3B34B2D5591F4F294B01A2770B5C73',
            '10': 'B58388B302ED7B4AE346A8CA1720E564F4CF423E373CC2CE1B7DE8BECF7335D2',
            '11': '7471E62969B1C56E56D68EA6B843209ADAA8C210F283A53F56D0EDEB24988599',
            '12': '494FA0142738AEC78FAF08213DE98BDE7700EBA8241C8A186EEA8E912057F473',
            '13': 'ABBF2974A61E145F161C2026D5CB0CC307E24C38738EDF75BB7805DD4E2D540A',
            '14': 'FAB423AA6F46CEFB7D8611164F1E6B59EFE7F8E38AFC0D503E084CFFA04EEE7D',
            '15': 'B995BCA7B9C9FFAF10EBB538CBBF051113E0057C409057792E0DC4C32DCCDDBD'
          }
        },
        {
          path: '',
          links: {
            '0': '5C2A9CAC3969195ADEBB8DC287B99127BE684044C238B4702DB2AB080F5A8186',
            '1': '7DC1F1F5BC7A8AA6D6216E6E6053F098738BFC74E363D0BB9579A6205BAAEFF2',
            '2': 'D7A51472A29203C59700A987DCAE5FCF692EB69244A77841365765CFC3B22DEA',
            '4': 'E5C014D5EAAED07ACD2CD86C6B8F659E5B92DB040B72F5FED050E4BEA61E781D',
            '5': '36B8E6E85C99E564220F4108854CFE742272F589BDB6C7C1C3F9A367BD0E436A',
            '6': '19F233C2EC0E2AA42E687F1915802CEA3461EC192D4F23424F2742CCA789D39D',
            '7': 'F7A7923106D3F5AC35AD9F3E0C3B582239476EF40B47DB0FB4E26AF2DB0ABD3B',
            '8': 'BEA2715DC3C3A4B13588D7BD38BD2CA87A4FCF7E694E9C94D15158E0B4D34F88',
            '9': 'C537D30FE88ACE367FCB44782221E30A22BAB393222E77F8BB8F43E48DF87E34',
            '10': '0B7A955BB2A733A5C3F34A625DA92DDA5B78758A6FEEEC8D8CE1E3FCBCB82AF6',
            '11': '108B0DEB54A347ECAAF3195C093650BBD025018FAAC0806110BFE4B40FE1105D',
            '12': 'E3A029594B5776429C3078438191BC11D8430A1C199A3AAC947E589419A85F09',
            '13': 'DFAF43BD4D455791A9B6D382D2A9DA21BFFDEC6EB8CBDFDEB00F18307EA10FB0',
            '14': 'CD44E33954A2E4C9CBFF09C9BC20F6F227106A6688EC77E2F2D8381BE93328B7',
            '15': '3025F78B3D9E70EA88333EDF524AFE11B384ABE5443FEBFA9D7B98428A927F2A'
          }
        },
        {
          path: '',
          links: {
            '0': '2B24B19FD077B9F1E39C26DD2A336CF1DFB6336A3ACC869B0F536376D7BC389A',
            '12': '18600E5015947C1B09EC88E3621519A92B4D625BD5DBD3695FC7808A2C388CD5',
            '13': '104641AD7503907C388A28598D7B7BAE7F340C3120B3C23661ADA64E20B33614'
          }
        },
        {
          path: '',
          links: {
            '4': '7D63392566B5FD0BFF3DC92E52D9176090419B3BEA6F323118384E930CB06F30',
            '6': 'CE9C25C6FB047EA56572A2DA824162F7DC0C08F4608D8245D7130E60B7CCE3DA'
          }
        },
        {
          path: '7859DB5C8FDABAFCD555B8E52D0ABDA5B818DDC5482F781082C80FC11D',
          value: '41D8261B3D2843F2869A383A79928976566042F766C84358CDB5773CBC74F24D'
        }
      ])
    })
  })

  describe('hashLockStatePath', () => {
    it('should deserialize an hash lock state path request', () => {
      let buffer = Buffer.from('A5F82EC8EBB341427B6785C8111906CD0DF18838FB11B51CE0E18B5E79DFF630', 'hex')
      expect(tcp.hashLockStatePath.request(buffer)).to.eql({
        hash: 'A5F82EC8EBB341427B6785C8111906CD0DF18838FB11B51CE0E18B5E79DFF630'
      })
    })

    it('should deserialize a hash lock state path response', () => {
      let buffer = Buffer.from('00000000', 'hex')
      expect(tcp.secretLockStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {}
        }
      ])
    })
  })

  describe('secretLockStatePath', () => {
    it('should deserialize an secret lock state path request', () => {
      let buffer = Buffer.from('A5F82EC8EBB341427B6785C8111906CD0DF18838FB11B51CE0E18B5E79DFF630', 'hex')
      expect(tcp.secretLockStatePath.request(buffer)).to.eql({
        secret: 'A5F82EC8EBB341427B6785C8111906CD0DF18838FB11B51CE0E18B5E79DFF630'
      })
    })

    it('should deserialize a secret lock state path response', () => {
      let buffer = Buffer.from('00000000', 'hex')
      expect(tcp.secretLockStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {}
        }
      ])
    })
  })

  describe('metadataStatePath', () => {
    it('should deserialize an metadata state path request', () => {
      let buffer = Buffer.from('59287CEBCB3DA8389FF363631970BEE7FD310C84C6880F175B0BF50A91AFB77C', 'hex')
      expect(tcp.metadataStatePath.request(buffer)).to.eql({
        hash: '59287CEBCB3DA8389FF363631970BEE7FD310C84C6880F175B0BF50A91AFB77C'
      })
    })

    it('should deserialize a metadata state path response', () => {
      let buffer = Buffer.from('00001820CA394E7F4A7EF9D1C74FB92175BDEB9771FD91D3FB04C80ADC7DD9EBA221BADAE0B50B09F3E1035F2D57066A5E6B220E48BA788E88BB5712A11F63335C18738326325C6E30FA4F68DC1EA300CF5AAD12AA3730E23F3442F9349D528F57B8E5B90000002162E71567BFF8EC68D84AFA1737DF1C92F936E132E29ADDF5C876E9E9975AA83C6B5E286C6F2A023AA8F8BB89CD7E0BDE6594EE73C609D6D992167A9BAAB9380EFF3E413210543C5A48B3C84DE4EA85F58F7231D9DBDA953EABF406A9F3C08DADAD81950E920A24A60ED718058B03F707CFA38C4BB5A4E311518893DF1D12F17330', 'hex')
      expect(tcp.metadataStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {
            '3': 'CA394E7F4A7EF9D1C74FB92175BDEB9771FD91D3FB04C80ADC7DD9EBA221BADA',
            '4': 'E0B50B09F3E1035F2D57066A5E6B220E48BA788E88BB5712A11F63335C187383',
            '13': '26325C6E30FA4F68DC1EA300CF5AAD12AA3730E23F3442F9349D528F57B8E5B9'
          }
        },
        {
          path: '',
          links: {
            '8': '62E71567BFF8EC68D84AFA1737DF1C92F936E132E29ADDF5C876E9E9975AA83C',
            '13': '6B5E286C6F2A023AA8F8BB89CD7E0BDE6594EE73C609D6D992167A9BAAB9380E'
          }
        },
        {
          path: '413210543C5A48B3C84DE4EA85F58F7231D9DBDA953EABF406A9F3C08DADAD',
          value: '81950E920A24A60ED718058B03F707CFA38C4BB5A4E311518893DF1D12F17330'
        }
      ])
    })
  })

  describe('mosaicStatePath', () => {
    it('should deserialize an mosaic state path request', () => {
      let buffer = Buffer.from('A84582052890A951', 'hex')
      expect(tcp.mosaicStatePath.request(buffer)).to.eql({
        mosaicId: '51A99028058245A8'
      })
    })

    it('should deserialize a mosaic state path response', () => {
      let buffer = Buffer.fromhex')
      expect(tcp.mosaicStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {
            '0': 'DCE9621DBC2DFA21D1E7CBAF11D1322C2A6D7DA8346F8EA931603D72ACFDF2A8',
            '1': 'AB714C5979A03A380296E2233B0BE56542F4519E68A3025882962EC8A71F27A9',
            '2': '041807D329C1D29F8477C0862A7B5C590D7F8D4FA120C2BAB1F778122D3C251A',
            '3': '7EFA9A61E0B6A772A862DD4B549C13B312A6B4AACFA7BF4CE9EBCAE6345642B1',
            '4': '5B2070EA2F6B3F9E4400CC3974F3C8BDE827A9A740F8EF91E8096D0837B04A09',
            '5': '10212265D705F1E6A04100C6EB39779B0FDD8CC5404FB5743B8FC09983761191',
            '6': '172D83E8816B816A11BFBDD19625F36E3B703E59E589971EDF9A0EB891884364',
            '7': 'DA5CCD2A7922F625BDDBD049491C77B112BD6CA2F4ADF5E0B2363B65F418F675',
            '8': '342793668623BC39B1553ED2C3DE9BA1F218D1CCA2AF8078D2368E19E1321BF1',
            '9': '6FA8C683EED3964C0F61A95012203FC1E2727A19233CEF8AFD0C086A794033E4',
            '10': '7071BB58DDBAFF5289217DFE02DCFCFF599CFA0369810C8E23983A2472FC8881',
            '11': '14D893F09C266F7A63FF9BBE064F64FBFB360378441C3E636B364766519264A1',
            '12': '749D0EE21F942E56FBEA57235D71E2C5874C5196AD8D6C214FC6C0FD97C16CE4',
            '13': '323B7544C12B2F9D95C05D6445265ED672C104B292F426D2BDCABD7B17A2151C',
            '14': 'B09D654481CD84D9A14BE44CA2A96E4068DC605CF714ABA29CD0F672A3859491',
            '15': 'B7E244A0397F3FEA675BAA2D5822C7620D1D12DB129DFBF4D687BD63D9133AA2'
          }
        },
        {
          path: '',
          links: {
            '0': '3287215846318F6ADD32F3B7CEC51A219E372664347E7B2558CA1FCD18BE4227',
            '2': 'D72661BAC11FC3311D589BCEA8DA91D9784BEDEC2E671D468271549201DDFB43',
            '3': '330DC04FE909DCEA8F06D990179F37B59D9E06E4A4C45FCB34920DAE691A35C6',
            '5': '0ABAB007418D8BF52B35FF542201EC8D6439E8D93F25341F9311DF9322A8A5EB',
            '6': '589D9E43238550E9B971663A50BF7159A4505064ECFAFD748566F02254CA1DF4',
            '7': '6FA85CF3A48D250306A62A864EDDDA5BF5AFD4F56BA959AAE1F94731BE858F73',
            '8': 'C23210AC5A972B852BDA80274A1F75CC90AA7A0CC164B1618D386D1190F56E04',
            '10': '0495F599A96F59B6FA20AAC5EF82B1F7B5F6C78ED5B2039AB550465464BEB2DD',
            '11': 'E86DF450912BE6D7CF1397FAF3B61988E664FA2A687FDD2D75FCBE7EB3BD3EB2',
            '13': '45FF0EA414A9FEC2E5C7BE53B82A7F245836BD61177FF2F486F9120877C42045',
            '15': '09A57DCC8CC8FB301B77D417906D9E50209E5BE0203CA30F0D42B7EF539F93F3'
          }
        },
        {
          path: '',
          links: {
            '12': '481EFCD9EE2461F5B6A859DCECAC77C9E3DE16498F5C58D0F41E33054F472F5F',
            '14': 'CCA00C7841EE04E1618EC598194213164C58C7E2DE08284122D12D3D1C191B4E'
          }
        },
        {
          path: '00866A50F45F52F2C09429C74EDAD8F2EDA9238135DCCEB8A9C7C18837E55',
          value: 'E029B0A1602CAAB2E50D83E895A1E77C52401760E788A0ACA87887A1975051D8'
        }
      ])
    })
  })

  describe('multisigStatePath', () => {
    it('should deserialize an multisig state path request', () => {
      let buffer = Buffer.from('545651E3CEEFCC47A2763B059A95C99C3BE236258811382933340FC324ECEAA9', 'hex')
      expect(tcp.multisigStatePath.request(buffer)).to.eql({
        publicKey: '545651E3CEEFCC47A2763B059A95C99C3BE236258811382933340FC324ECEAA9'
      })
    })

    it('should deserialize a multisig state path response', () => {
      let buffer = Buffer.from('0000FFFFE48B2C6A32B549C46469D0439D603368CFA471A5923E2EB6B1B0B08858249B3CEE5220E2301FBBFCC6C01D20E933341AEC5E5A20208D34519E1F5E5055A4764853BA5ADDE3C9F5662C953F693FEEDCE888DCD44CACEEA1991EA15F3104FFB24CC39E35CA2D79F47467F37AB3A06A60AC51F1F3BDC3223630891FC7D1FE1BCEB0FBCF80CF6BD63E5D003D0885B3C9E8ACDDA6B77E2AC310E45C378EA6C6B263226F8198908C593BFB60DC47715DF4A7AA9CA56053B6E67ECE9B1B05A9793A529107D95F6B00D46622EB948A00FA6ED9D99EEB8974D6081E8D4A03261893E005505653A911A4B5BB069313CF29BCDCD5FEE4CE78EF0EF50DCAD0A82532407F10880E6846976F7D9EB15A3BF8E2BC668DEB67B3D1A887941588B83D926BB2149EF10502459EEFC18F0570D21B91C48894EEC3DD05B71CCBE7E518F4EB436E04D7AB75E4D11D16F8AE899DDE42AC79A0BEA870FD9F81742B4E64444791E4F9A83A9000AB33B58FD70595D4612071B7E1ACC1F7E3BEC445F274B4FB573B35EB810DAE657F19F30840AE74A11AACB6929F18A151341779C9B4048FFAA21181E1F55C8C32C0728B477B141B25DDB05A357C9FA5AA618F50FF96CA1AB6F9DD1D385265B57BE52B1204B13E17A542BE9053A0B89571A95603502C03F0919F1B268FF31A0601D5F20ED4AD7A9A9761A79B3108529CA4CA7E3199558552617404D6BE95F1720000BF174EE2121C5612C8CEF7A8D203165ECB616BCE3E4CF60BC108D8445B957769663800B0821F0683CD78756DA1EF6520FB3DB87EAC2FA59D1B1E3C785D061AAA5F791D9CCBE62AF2D4298759C5F4680C7E35A66E7B89D242FB5D3914A9B6DB05F8AD8956CF0C127C374A8B0F27F7BDFC903842A1D5B3DC6BCC79B295FD2B506039DF4849B62A46D1E31147ED2B91780F0AAAA6F2B782C8529D2BACF51456FF337376A0D92D9C000952856956895351D04F55B02F0866789FD4572E627812628FD6B724F696BB4075BB8368D7C795BE6EB8749076B2D77E8351154212374020F813DE7177A97EC6995638F3205B666A67DE8DB93018B0D48D1241BDFB5CFB481E8E95C4E185AFD4852B4896B83C91C5ACBE310508F65C10CDED6C1B67D8AC530546345B65D7E304321AD9579D76611E18ED045A3E56032544D1BC234CF4AD58D82EC54EF436BA93165CEC283B23D09AABDB8B98CA8DF0C92E1685102C5F6396F5463EFF3E75501ED7BD877C7EB639A63D559CF2B618CE80D570D27D1DC49B4B6F4FE82F26D02657B122F4D6410F1A48DD384143A3860A724B90822875934C2E46FCF1F4', 'hex')
      expect(tcp.multisigStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {
            '0': 'E48B2C6A32B549C46469D0439D603368CFA471A5923E2EB6B1B0B08858249B3C',
            '1': 'EE5220E2301FBBFCC6C01D20E933341AEC5E5A20208D34519E1F5E5055A47648',
            '2': '53BA5ADDE3C9F5662C953F693FEEDCE888DCD44CACEEA1991EA15F3104FFB24C',
            '3': 'C39E35CA2D79F47467F37AB3A06A60AC51F1F3BDC3223630891FC7D1FE1BCEB0',
            '4': 'FBCF80CF6BD63E5D003D0885B3C9E8ACDDA6B77E2AC310E45C378EA6C6B26322',
            '5': '6F8198908C593BFB60DC47715DF4A7AA9CA56053B6E67ECE9B1B05A9793A5291',
            '6': '07D95F6B00D46622EB948A00FA6ED9D99EEB8974D6081E8D4A03261893E00550',
            '7': '5653A911A4B5BB069313CF29BCDCD5FEE4CE78EF0EF50DCAD0A82532407F1088',
            '8': '0E6846976F7D9EB15A3BF8E2BC668DEB67B3D1A887941588B83D926BB2149EF1',
            '9': '0502459EEFC18F0570D21B91C48894EEC3DD05B71CCBE7E518F4EB436E04D7AB',
            '10': '75E4D11D16F8AE899DDE42AC79A0BEA870FD9F81742B4E64444791E4F9A83A90',
            '11': '00AB33B58FD70595D4612071B7E1ACC1F7E3BEC445F274B4FB573B35EB810DAE',
            '12': '657F19F30840AE74A11AACB6929F18A151341779C9B4048FFAA21181E1F55C8C',
            '13': '32C0728B477B141B25DDB05A357C9FA5AA618F50FF96CA1AB6F9DD1D385265B5',
            '14': '7BE52B1204B13E17A542BE9053A0B89571A95603502C03F0919F1B268FF31A06',
            '15': '01D5F20ED4AD7A9A9761A79B3108529CA4CA7E3199558552617404D6BE95F172'
          }
        },
        {
          path: '',
          links: {
            '0': '4EE2121C5612C8CEF7A8D203165ECB616BCE3E4CF60BC108D8445B9577696638',
            '1': '00B0821F0683CD78756DA1EF6520FB3DB87EAC2FA59D1B1E3C785D061AAA5F79',
            '2': '1D9CCBE62AF2D4298759C5F4680C7E35A66E7B89D242FB5D3914A9B6DB05F8AD',
            '3': '8956CF0C127C374A8B0F27F7BDFC903842A1D5B3DC6BCC79B295FD2B506039DF',
            '4': '4849B62A46D1E31147ED2B91780F0AAAA6F2B782C8529D2BACF51456FF337376',
            '5': 'A0D92D9C000952856956895351D04F55B02F0866789FD4572E627812628FD6B7',
            '7': '24F696BB4075BB8368D7C795BE6EB8749076B2D77E8351154212374020F813DE',
            '8': '7177A97EC6995638F3205B666A67DE8DB93018B0D48D1241BDFB5CFB481E8E95',
            '9': 'C4E185AFD4852B4896B83C91C5ACBE310508F65C10CDED6C1B67D8AC53054634',
            '10': '5B65D7E304321AD9579D76611E18ED045A3E56032544D1BC234CF4AD58D82EC5',
            '12': '4EF436BA93165CEC283B23D09AABDB8B98CA8DF0C92E1685102C5F6396F5463E'
          }
        },
        {
          path: '75501ED7BD877C7EB639A63D559CF2B618CE80D570D27D1DC49B4B6F4FE82F',
          value: '26D02657B122F4D6410F1A48DD384143A3860A724B90822875934C2E46FCF1F4'
        }
      ])
    })
  })

  describe('namespaceStatePath', () => {
    it('should deserialize an namespace state path request', () => {
      let buffer = Buffer.from('169515968A1F5FA9', 'hex')
      expect(tcp.namespaceStatePath.request(buffer)).to.eql({
        namespaceId: 'A95F1F8A96159516'
      })
    })

    it('should deserialize a namespace state path response', () => {
      let buffer = Buffer.fromhex')
      expect(tcp.namespaceStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {
            '0': 'C5D38BB290F718D784659A2D1D6CA858B2A58BD61239E54A779CC5B75C9B7C9C',
            '1': 'D3160A5B8B277915CC1D9ED4931BB1C6FC72571C5327B00D87994442FC45BFFC',
            '2': '3A215B55BF9D0024DFA0EAD3C05882ED91FD7F4A1D3575B8981CBEB322DE1033',
            '3': 'D14D3AFC296E0BC1E35AE91BBD2F4D3F91F9503040617710DA1447984453164D',
            '4': '14CCE01182C1A9366D3EED3F8D5EFAB8EED81A120040902315435BE35CDE368F',
            '5': 'F7E50E0C293AC7C69B50A318E0BFFCFFBF9D2F3AAC5C58B3655C9B1A3CF1BF0D',
            '6': 'F6FCC0E00C76CA69D31F2BF0E504E87E9C007BE4D50053BC2A4935C999CE0C38',
            '7': '863B3A4ECD857C90ED1A2F354F90C75E15DF2E24965CA610032723429E1F2592',
            '8': '1FB81496E4D1397115838352EC512E808939DDD82288ED31BC69471E436E25BF',
            '9': 'CE2C0E1983511321A54BC92F8CF23354A5E00DEE7464F1D3ADA0BCA3B430433B',
            '10': 'D474F16C3647BD2AC3080586F2B436A6074733A6D1B90A202E29E281ACFA6F95',
            '11': '9585E3F8D7042754A3D695E397A898536172A5D786EA5D27680BCAD2232ACA84',
            '12': '6044F06E4AD30E8E978993ADE84803BE8BF043E07B1FB5852F9A0C76363F6674',
            '13': '1A1863B279BD06531C7A34647F41EF8F524C10D53CCA4D4720E3FFF812E9A9D1',
            '14': 'D7BD1311940D676E8E30E6D9866FB80C9BA2433927C502A4D666F8894E3D6F54',
            '15': '117F6EC021A3695DD4D8A79CBB58A65A85AEC08FA8C056B3A82DA694F320B910'
          }
        },
        {
          path: '',
          links: {
            '0': '46AAECA0F0FBC6437E50952E2B79EE28AAEC6D738837C26402E4D009DB833357',
            '4': 'F71B60BE1D84053400CEE95ED27621A128BFC3341E6A364C5DC9999D095BDBF3',
            '10': '79BFC3F94B3BF74EC5F3699855C4CB1D8CD89F9877DB6B1465249635DF2AF402',
            '11': '317FFA04AC9E5B02023449FC6300C893AC00DDC2F4E9473D7AABDBB76498DC8C',
            '14': '9AE9C57B34882B9C922DE518FA93E6140EA8189DD0E8A84B5E06FB39686867E9'
          }
        },
        {
          path: '793E37E8616665E4E5DA0CAF388172AB754CEE17FE702019228A996084F6E7',
          value: '5E148A8353FB9CF207C84226A4635D387D51FC5C61FA70DDD492C00B47DBC3D6'
        }
      ])
    })
  })

  describe('accountRestrictionsStatePath', () => {
    it('should deserialize an account restriction path request', () => {
      let buffer = Buffer.from('984811DA06C4DDEC900173CF63375D9BF53D1594AF00E6F650', 'hex')
      expect(tcp.accountRestrictionsStatePath.request(buffer)).to.eql({
        address: 'TBEBDWQGYTO6ZEABOPHWGN25TP2T2FMUV4AON5SQ'
      })
    })

    it('should deserialize an account restriction path response', () => {
      let buffer = Buffer.from('FF400E9977CEC3DD22914BEE650A34D183B2651292DF2B9BC9A0D824F9CC5041527925D805340427B9EC63559F2FA07AF81F7B3DB4CB007C5F4FE4832C9FEE729684', 'hex')
      expect(tcp.accountRestrictionsStatePath.response(buffer)).to.eql([
        {
          path: '0E9977CEC3DD22914BEE650A34D183B2651292DF2B9BC9A0D824F9CC50415279',
          value: '25D805340427B9EC63559F2FA07AF81F7B3DB4CB007C5F4FE4832C9FEE729684'
        }
      ])
    })
  })

  describe('mosaicRestrictionsStatePath', () => {
    it('should deserialize an mosaic restriction path request', () => {
      let buffer = Buffer.from('4BB9C6DCF56209A1E52E2F646B3994FD7F266784E407C7891DC34BE5BEEE4437', 'hex')
      expect(tcp.mosaicRestrictionsStatePath.request(buffer)).to.eql({
        hash: '4BB9C6DCF56209A1E52E2F646B3994FD7F266784E407C7891DC34BE5BEEE4437'
      })
    })

    it('should deserialize an mosaic restriction path response', () => {
      let buffer = Buffer.from('0000800205066A587DFD3015F09EBA1153A67E884D6954A29A769728E1170A86EC2FF61C8FDEB847F695C6B374211847CACD25BCB9821C6969B3064A2AD164F4ACF12002FF3F06B9F2F89502611744D0E7011F54842257A5E8D87DB97B80A2B2D05BEE3381E064E73646C216EAF7B7646F5B05DED081B81375EB9214685A707A3695091E8C90', 'hex')
      expect(tcp.mosaicRestrictionsStatePath.response(buffer)).to.eql([
        {
          path: '',
          links: {
            '7': '05066A587DFD3015F09EBA1153A67E884D6954A29A769728E1170A86EC2FF61C',
            '9': '8FDEB847F695C6B374211847CACD25BCB9821C6969B3064A2AD164F4ACF12002'
          }
        },
        {
          path: '06B9F2F89502611744D0E7011F54842257A5E8D87DB97B80A2B2D05BEE3381E',
          value: '64E73646C216EAF7B7646F5B05DED081B81375EB9214685A707A3695091E8C90'
        }
      ])
    })
  })

  describe('diagnosticCounters', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('confirmTimestampedHashes', () => {
    // TODO(ahuszagh) use the ones in the cache and confirm this.
    // The request and the response should be similar, I believe.
    // The diagnostic methods don't seem to be working for me, likely don't have the plugin.
    // TODO(ahuszagh) Add unittests.
    // "9117292276@D96B0C392B253E118D6B105479CD8D55A879422BCAC551855E71C4E8DDB51FD3"
  })

  describe('activeNodeInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('blockStatement', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('unlockedAccounts', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('accountInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('hashLockInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('secretLockInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('metadataInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('mosaicInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('multisigInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('namespaceInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('accountRestrictionsInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })

  describe('mosaicRestrictionsInfos', () => {
    // TODO(ahuszagh) Add unittests.
  })
})
